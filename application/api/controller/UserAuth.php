<?php
/**
 * User: 周星
 * Date: 2019/3/25
 * Time: 20:45
 * Email: zhouxing@benbang.com
 */

namespace app\api\controller;

use util\ErrorCode;
use util\HttpClient;
use util\ReqResp;
use think\Db;
use think\facade\Log;

class UserAuth extends Base {

    // 微信小程序通过js_code获取openid接口
    const WX_XCX_JS_CODE_URL = 'https://api.weixin.qq.com/sns/jscode2session';

    public function initialize () {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    // 小程序接收授权code接口
    public function receiveCode() {
        try {
            $code = trim(input('post.xcx_code'));
            if (!$code) {
                throw new \Exception('无效的xcx_code', ErrorCode::PARAMS_ERROR);
            }

            // 去微信获取用户信息
            $codeInfo = $this->getOpenidByWx($code);
            // 保存用户信息,返回登录所需token信息
            $userToken = $this->saveUser($codeInfo);

            $return = [
                'user_token' => $userToken['user_token'],
                'refresh_token' => $userToken['refresh_token'],
            ];
            ReqResp::outputSuccess($return, "success");
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 获取用户openid
    private function getOpenidByWx ($code) {
        // 获取openid
        $url = self::WX_XCX_JS_CODE_URL;
        $params = config('wx_xcx_config');
        $options = [
            'appid' => $params['appid'],
            'secret' => $params['secret'],
            'js_code' => $code,
            'grant_type' => $params['grant_type'],
        ];
        $url = HttpClient::combineUrl($url, $options);
        $res = HttpClient::get($url);
        // $resp = "{\"session_key\":\"7FmVecLXP+w\/PqFjsDr\/oA==\",\"openid\":\"odTxZ5GOeH57O9c-mZNYB5ZLNMhA\"}";
        $result = json_decode($res, true);
        Log::record("[receiveCode get result] " . $res, Log::ERROR);
        if (isset($result['errcode']) || !isset($result['openid'])) {
            throw new \Exception($result['errmsg'], ErrorCode::PARAMS_ERROR);
        }
        return $result;
    }

    private function saveUser (array $codeInfo) {
        // 添加数据到user_info
        Db::startTrans();
        // 用户条件
        $where = ['openid' => $codeInfo['openid']];

        // 用户表
        // 查询用户是否存在，返回用户信息实例
        $user = app('UserInfoModel',true)->checkUserExists($where);

        // 如果用户存在，将id放进数组
        if ($user) {
            $userData = ['id' => $user['id'],];
        } else {
            // 用户初始化数据
            $userData = ['openid' => $codeInfo['openid']];
        }

        // 保存用户数据
        $userId = app('UserInfoModel',true)->saveUser($userData);
        if (!$userId) {
            Db::rollback();
            throw new \Exception('网络错误，请稍后再试', ErrorCode::PARAMS_ERROR);
        }

        // 第三方表
        // 添加数据到user_third_party
        $userThird = app('UserThirdPartyModel',true)->checkUserExists($where);
        if (!$userThird) {
            $addData = [
                'user_id' => $userId,
                'openid' => $codeInfo['openid'],
                'session_key' => $codeInfo['session_key'],
            ];
            $thirdId = app('UserThirdPartyModel',true)->saveData($addData);
            if (!$thirdId) {
                Db::rollback();
                throw new \Exception('网络错误，请稍后再试', ErrorCode::PARAMS_ERROR);
            }
        }

        // 用户token表
        // 默认添加一个小程序的user_token
        $userToken = app('UserTokenModel',true)->saveToken($userId, config('login_xcx'), $codeInfo['openid']);
        if (!$userToken) {
            Db::rollback();
            throw new \Exception('网络错误，请稍后再试', ErrorCode::PARAMS_ERROR);
        }

        Db::commit();
        return $userToken;
    }

    // 小程序接受授权信息接口
    public function receiveUserInfo () {
        try {
            $userId = $this->getUserId();

            $params = input('post.user_info');
            if (!$params) {
                throw new \Exception('缺少数据', ErrorCode::PARAMS_ERROR);
            }
            $params = json_decode(htmlspecialchars_decode($params), true);
            Log::record("[receiveUserInfo params] " . json_encode($params), Log::NOTICE);

            if (!$params['avatarUrl']) {
                throw new \Exception('缺少头像', ErrorCode::PARAMS_ERROR);
            }
            if (!$params['nickName']) {
                throw new \Exception('缺少昵称', ErrorCode::PARAMS_ERROR);
            }
            if (!isset($params['gender'])) {
                throw new \Exception('缺少性别', ErrorCode::PARAMS_ERROR);
            }

            $userInfo = array(
                'id' => $userId,
                'avatar'       => $params['avatarUrl'],
                'country'      => $params['country'],
                'province'     => $params['province'],
                'city'         => $params['city'],
                'sex'          => intval($params['gender']),
                'language'     => $params['language'],
                'display_name' => $params['nickName'],
            );

            Db::startTrans();
            // 更新user_info
            $userId = app('UserInfoModel',true)->saveUser($userInfo);
            if ($userId === false) {
                Db::rollback();
                throw new \Exception('更新失败', ErrorCode::UPDATE_FAILED);
            }

            // 更新user_third_party
            $saveData = array(
                'avatar'   => $params['avatarUrl'],
                'nickname' => $params['nickName'],
            );
            $thirdId = app('UserThirdPartyModel',true)->saveData($saveData, [
                'user_id' => $userId]);
            if ($thirdId === false) {
                Db::rollback();
                throw new \Exception('更新失败', ErrorCode::UPDATE_FAILED);
            }

            Db::commit();

            ReqResp::outputSuccess([], "success");
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 获取新的user_token
    public function renewalUserToken () {
        try {
            $token = trim(input('post.refresh_token'));
            if (empty($token)) {
                throw new \Exception('refresh_token is empty', ErrorCode::PARAMS_ERROR);
            }

            // 验证token
            $token = app('UserTokenModel',true)->verifyUserToken($token, false);
            $userId = $token['user_id'];

            // 生成token
            $userToken = app('UserTokenModel',true)->saveToken($userId, config('login_xcx'));

            $return = [
                'user_token'    => $userToken['user_token'],
                'refresh_token' => $userToken['refresh_token'],
            ];
            
            ReqResp::outputSuccess($return, "success");
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }
}